document.addEventListener("DOMContentLoaded", () => {
  const certificatesData = [
    {
      id: 1,
      image: "./img/fest.jpg",
      title: '–ë—Ä–∞–≤ —É—á–∞—Å—Ç—å —É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó IT Future Fest 2025',
      date: "11.04.2025",
      organizer: "–õ—å–≤—ñ–≤—Å—å–∫–∏–π –Ü–¢ –ö–ª–∞—Å—Ç–µ—Ä",
      link: "https://itcluster.lviv.ua/en/events/lviv-it-cluster-to-host-it-future-fest-2025-ukraines-largest-tech-career-event-for-students/",
      category: "–ö—É—Ä—Å–∏",
      level: "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π",
      tags: [
        "–Ü–¢",
        "–ö–∞—Ä'—î—Ä–Ω–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫",
        "–û—Å–≤—ñ—Ç–∞",
        "–ú–æ–ª–æ–¥—å",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó",
        "–õ—å–≤—ñ–≤",
      ],
    },
    {
      id: 2,
      image: "./img/–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –≤—ñ–Ω–Ω–∏—Ü—è.jpg",
      title:
        "ü•àII –º—ñ—Å—Ü–µ –Ω–∞ XXIII –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É –∫–æ–Ω–∫—É—Ä—Å—ñ –∑ –≤–µ–±-–¥–∏–∑–∞–π–Ω—É —Ç–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–æ—ó –≥—Ä–∞—Ñ—ñ–∫–∏",
      date: "29.03.2025",
      organizer: "–íi–Ω–Ω–∏—Ü—å–∫–∏–π –Ω–∞—Üi–æ–Ω–∞–ª—å–Ω–∏–π —Ç–µ—Ö–Ωi—á–Ω–∏–π —É–Ωi–≤–µ—Ä—Å–∏—Ç–µ—Ç",
      link: "https://webdesign.vntu.edu.ua/index.php?lang=ua",
      category: "–•–∞–∫–∞—Ç–æ–Ω–∏/–ö–æ–Ω–∫—É—Ä—Å–∏",
      level: "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π",
      tags: [
        "Web Design",
        "Computer Graphics",
        "Creative Technologies",
        "Digital Art",
        "UI/UX",
        "Innovation",
        "Youth Talent",
        "IT Education",
      ],
    },
    {
      id: 3,
      image: "./img/–ú–ê–ù –û–±–ª–∞—Å—Ç—å.jpg",
      title:
        "ü•á –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ–±–ª–∞—Å–Ω–æ–≥–æ –µ—Ç–∞–ø—É –∫–æ–Ω–∫—É—Ä—Å—É –ú–∞–ª–æ—ó –∞–∫–∞–¥–µ–º—ñ—ó –Ω–∞—É–∫ –£–∫—Ä–∞—ó–Ω–∏",
      date: "20.02.2025",
      organizer:
        "–ö–æ–º—É–Ω–∞–ª—å–Ω–∏–π –ø–æ–∑–∞—à–∫—ñ–ª—å–Ω–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥ ¬´–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∏–π –æ–±–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä –Ω–∞—É–∫–æ–≤–æ‚Äë—Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ —É—á–Ω—ñ–≤—Å—å–∫–æ—ó –º–æ–ª–æ–¥—ñ¬ª –ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–æ—ó –æ–±–ª–∞—Å–Ω–æ—ó —Ä–∞–¥–∏",
      link: null,
      category: "–•–∞–∫–∞—Ç–æ–Ω–∏/–ö–æ–Ω–∫—É—Ä—Å–∏",
      level: "–û–±–ª–∞—Å–Ω–∏–π",
      tags: ["–ù–∞—É–∫–∞", "–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è", "–Ü–Ω–Ω–æ–≤–∞—Ü—ñ—ó"],
    },
    {
      id: 4,
      image: "./img/ua (1).jpg",
      title:
        "ü•âIII –º—ñ—Å—Ü–µ –Ω–∞ –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É –∫–æ–Ω–∫—É—Ä—Å—ñ –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–æ—ó –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –≤–µ–±–¥–∏–∑–∞–π–Ω—É ¬´CreDiCo 2024",
      date: "20.12.2024",
      organizer:
        "–°—É–º–î–ü–£ —ñ–º–µ–Ω—ñ –ê. –°. –ú–∞–∫–∞—Ä–µ–Ω–∫–∞ (–£–∫—Ä–∞—ó–Ω–∞), –£–∂–ù–£ (–£–∫—Ä–∞—ó–Ω–∞), Bridgewater State University (–°–®–ê), –í—ñ–ª—å–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –¢–±—ñ–ª—ñ—Å—ñ (–ì—Ä—É–∑—ñ—è), –Ø–Ω –î–ª—É–≥–æ—à –ê–∫–∞–¥–µ–º—ñ—è (–ü–æ–ª—å—â–∞), –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç –ú–∞–ª—Ç–µ–ø–µ (–¢—É—Ä–µ—á—á–∏–Ω–∞).",
      link: "https://drive.google.com/file/d/1SSz-mF9whfatsDQ2S_LqoPb0btFjbt-5/view",
      category: "–•–∞–∫–∞—Ç–æ–Ω–∏/–ö–æ–Ω–∫—É—Ä—Å–∏",
      level: "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π",
      tags: [
        "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∞ –≥—Ä–∞—Ñ—ñ–∫–∞",
        "–í–µ–±–¥–∏–∑–∞–π–Ω",
        "–Ü–¢",
        "–û—Å–≤—ñ—Ç–∞",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó",
        "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∫–æ–Ω–∫—É—Ä—Å",
      ],
    },
    {
      id: 5,
      image: "./img/INFOMATRIX.jpg",
      title:
        "–£—á–∞—Å–Ω–∏–∫ –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å—É –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–Ω–∏—Ö –ø—Ä–æ—î–∫—Ç—ñ–≤ INFOMATRIX UKRAINE 2025",
      date: "28.03.2025",
      organizer:
        "–ö–∏—ó–≤—Å—å–∫–∞ –ú–∞–ª–∞ –∞–∫–∞–¥–µ–º—ñ—è –Ω–∞—É–∫ —É—á–Ω—ñ–≤—Å—å–∫–æ—ó –º–æ–ª–æ–¥—ñ (–ö–∏—ó–≤—Å—å–∫–∞ –ú–ê–ù), –î–µ—Ä–∂–∞–≤–Ω–∏–π —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç ¬´–ö–∏—ó–≤—Å—å–∫–∏–π –∞–≤—ñ–∞—Ü—ñ–π–Ω–∏–π —ñ–Ω—Å—Ç–∏—Ç—É—Ç¬ª (–ö–ê–Ü), –§–æ–Ω–¥ –æ—Å–≤—ñ—Ç–Ω—ñ—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ Lumina (Lumina Educational Institutions Foundation)",
      link: null,
      category: "–•–∞–∫–∞—Ç–æ–Ω–∏/–ö–æ–Ω–∫—É—Ä—Å–∏",
      level: "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π",
      tags: [
        "–Ü–¢",
        "–ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
        "–Ü–Ω–Ω–æ–≤–∞—Ü—ñ—ó",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó",
        "–û—Å–≤—ñ—Ç–∞",
        "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∫–æ–Ω–∫—É—Ä—Å",
        "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∞ –≥—Ä–∞—Ñ—ñ–∫–∞",
        "–í–µ–±–¥–∏–∑–∞–π–Ω",
        "–†–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω—ñ–∫–∞",
        "–ù–∞—É–∫–æ–≤—ñ –ø—Ä–æ—î–∫—Ç–∏",
      ],
    },
    
  ];

  let currentCategoryFilter = "all";
  let currentLevelFilter = "all";
  let currentSortOption = "date-desc";

  const certificatesGrid = document.getElementById("certificates-grid");
  const categoryFilters = document.getElementById("category-filters");
  const levelFilters = document.getElementById("level-filters");
  const sortSelect = document.getElementById("sort-select");
  const modal = document.getElementById("certificate-modal");
  const closeButton = document.querySelector(".modal .close-button");
  const downloadPdfBtn = document.getElementById("download-pdf-btn");

  // Elements for header/footer functionality
  const burger = document.querySelector(".burger");
  const navLinks = document.querySelector(".nav-links");
  const themeSwitch = document.querySelector(".theme-switch");
  const backToTopButton = document.querySelector(".back-to-top");
  const pwaInstallPrompt = document.getElementById("pwaInstallPrompt");
  const pwaInstallBtn = document.getElementById("pwaInstallBtn");
  const pwaCloseBtn = document.getElementById("pwaCloseBtn");
  let deferredPrompt; // For PWA installation

  // --- Header/Footer Functionality ---

  // Burger menu toggle
  burger.addEventListener("click", () => {
    navLinks.classList.toggle("active");
    burger.classList.toggle("toggle");
  });

  // Theme switch
  themeSwitch.addEventListener("click", () => {
    document.body.classList.toggle("dark-theme");
    // Save theme preference to localStorage
    if (document.body.classList.contains("dark-theme")) {
      localStorage.setItem("theme", "dark");
      themeSwitch.querySelector("i").classList.replace("fa-moon", "fa-sun");
    } else {
      localStorage.setItem("theme", "light");
      themeSwitch.querySelector("i").classList.replace("fa-sun", "fa-moon");
    }
  });

  // Apply saved theme on load
  const savedTheme = localStorage.getItem("theme");
  if (savedTheme === "dark") {
    document.body.classList.add("dark-theme");
    themeSwitch.querySelector("i").classList.replace("fa-moon", "fa-sun");
  } else {
    themeSwitch.querySelector("i").classList.replace("fa-sun", "fa-moon");
  }

  // Back to Top button visibility
  window.addEventListener("scroll", () => {
    if (window.scrollY > 300) {
      backToTopButton.classList.add("show");
    } else {
      backToTopButton.classList.remove("show");
    }
  });

  // PWA Install Prompt logic
  window.addEventListener("beforeinstallprompt", (e) => {
    e.preventDefault();
    deferredPrompt = e;
    pwaInstallPrompt.classList.add("show");
  });

  pwaInstallBtn.addEventListener("click", () => {
    pwaInstallPrompt.classList.remove("show");
    if (deferredPrompt) {
      deferredPrompt.prompt();
      deferredPrompt.userChoice.then((choiceResult) => {
        if (choiceResult.outcome === "accepted") {
          console.log("User accepted the A2HS prompt");
        } else {
          console.log("User dismissed the A2HS prompt");
        }
        deferredPrompt = null;
      });
    }
  });

  pwaCloseBtn.addEventListener("click", () => {
    pwaInstallPrompt.classList.remove("show");
  });

  // --- Certificate Page Functionality ---

  function renderCertificates(certs) {
    certificatesGrid.innerHTML = ""; // Clear existing cards

    certs.forEach((cert) => {
      const card = document.createElement("div");
      card.classList.add("certificate-card");
      card.dataset.id = cert.id;

      card.innerHTML = `
                <div class="certificate-card-image">
                    <img src="${cert.image}" alt="${cert.title}">
                </div>
                <div class="certificate-card-content">
                    <h3>${cert.title}</h3>
                    <p><strong>–î–∞—Ç–∞:</strong> ${cert.date}</p>
                    <p><strong>–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä:</strong> ${cert.organizer}</p>
                    <div class="tags">
                        <span class="tag">${cert.category}</span>
                        <span class="level">${cert.level}</span>
                        ${cert.tags
                          .map((tag) => `<span class="tag">${tag}</span>`)
                          .join("")}
                    </div>
                    ${
                      cert.link
                        ? `<a href="${cert.link}" target="_blank" rel="noopener noreferrer">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</a>`
                        : ""
                    }
                </div>
            `;
      certificatesGrid.appendChild(card);

      card.addEventListener("click", () => openModal(cert));
    });
  }

  function applyFiltersAndSort() {
    const filteredCerts = certificatesData.filter((cert) => {
      const matchesCategory =
        currentCategoryFilter === "all" ||
        cert.category === currentCategoryFilter;
      const matchesLevel =
        currentLevelFilter === "all" || cert.level === currentLevelFilter;
      return matchesCategory && matchesLevel;
    });

    filteredCerts.sort((a, b) => {
      switch (currentSortOption) {
        case "date-desc":
          return new Date(b.date) - new Date(a.date);
        case "date-asc":
          return new Date(a.date) - new Date(b.date);
        case "category-asc":
          return a.category.localeCompare(b.category);
        case "category-desc":
          return b.category.localeCompare(a.category);
        case "level-asc":
          return a.level.localeCompare(b.level);
        case "level-desc":
          return b.level.localeCompare(a.level);
        default:
          return 0;
      }
    });

    renderCertificates(filteredCerts);
  }

  // Filter event listeners
  categoryFilters.addEventListener("click", (e) => {
    if (e.target.classList.contains("filter-btn")) {
      document
        .querySelectorAll("#category-filters .filter-btn")
        .forEach((btn) => btn.classList.remove("active"));
      e.target.classList.add("active");
      currentCategoryFilter = e.target.dataset.filter;
      applyFiltersAndSort();
    }
  });

  levelFilters.addEventListener("click", (e) => {
    if (e.target.classList.contains("filter-btn")) {
      document
        .querySelectorAll("#level-filters .filter-btn")
        .forEach((btn) => btn.classList.remove("active"));
      e.target.classList.add("active");
      currentLevelFilter = e.target.dataset.filter;
      applyFiltersAndSort();
    }
  });

  // Sort event listener
  sortSelect.addEventListener("change", (e) => {
    currentSortOption = e.target.value;
    applyFiltersAndSort();
  });

  // Modal functions
  function openModal(cert) {
    document.getElementById("modal-image").src = cert.image;
    document.getElementById("modal-image").alt = cert.title;
    document.getElementById("modal-title").textContent = cert.title;
    document.getElementById("modal-date").textContent = cert.date;
    document.getElementById("modal-organizer").textContent = cert.organizer;
    document.getElementById("modal-category").textContent = cert.category;
    document.getElementById("modal-level").textContent = cert.level;
    document.getElementById("modal-tags").textContent = cert.tags.join(", ");

    const modalLinkContainer = document.getElementById("modal-link-container");
    const modalLink = document.getElementById("modal-link");
    if (cert.link) {
      modalLink.href = cert.link;
      modalLinkContainer.style.display = "block";
    } else {
      modalLinkContainer.style.display = "none";
    }

    modal.style.display = "block";
  }

  function closeModal() {
    modal.style.display = "none";
  }

  closeButton.addEventListener("click", closeModal);
  window.addEventListener("click", (event) => {
    if (event.target === modal) {
      closeModal();
    }
  });

  // PDF Download functionality
  downloadPdfBtn.addEventListener("click", () => {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    doc.setFontSize(22);
    doc.text("–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ —Ç–∞ –¥–∏–ø–ª–æ–º–∏", 105, 20, null, null, "center");
    doc.setFontSize(12);
    doc.text(
      "–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: " + new Date().toLocaleDateString("uk-UA"),
      105,
      30,
      null,
      null,
      "center"
    );

    let y = 40;
    const margin = 15;
    const lineHeight = 7;

    certificatesData.forEach((cert, index) => {
      if (y > 280) {
        // Check if new page is needed
        doc.addPage();
        y = 20;
      }

      doc.setFontSize(14);
      doc.text(`${index + 1}. ${cert.title}`, margin, y);
      y += lineHeight;

      doc.setFontSize(10);
      doc.text(`–î–∞—Ç–∞: ${cert.date}`, margin + 5, y);
      y += lineHeight;
      doc.text(`–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä: ${cert.organizer}`, margin + 5, y);
      y += lineHeight;
      doc.text(`–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${cert.category}`, margin + 5, y);
      y += lineHeight;
      doc.text(`–†—ñ–≤–µ–Ω—å: ${cert.level}`, margin + 5, y);
      y += lineHeight;
      doc.text(`–¢–µ–≥–∏: ${cert.tags.join(", ")}`, margin + 5, y);
      y += lineHeight;

      if (cert.link) {
        doc.textWithLink("–ü–æ—Å–∏–ª–∞–Ω–Ω—è", margin + 5, y, { url: cert.link });
        y += lineHeight;
      }
      y += lineHeight * 0.5; // Add some space between entries
    });

    doc.save("–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏_—Ç–∞_–¥–∏–ø–ª–æ–º–∏.pdf");
  });

  // Initial render
  applyFiltersAndSort();
});
